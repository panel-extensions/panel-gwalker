name: tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
    - '*'
  workflow_dispatch:
  schedule:
    - cron: '0 19 * * SUN'

jobs:
  pre_commit:
    name: Run pre-commit hooks
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "1"
      - name: set PY
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|$\{\{ env.PY \}\}|$\{\{ hashFiles('.pre-commit-config.yaml') \}\}
      - name: pre-commit
        uses: pre-commit/action@v3.0.0
  unit_test_suite:
    name: Unit tests on $\{\{ matrix.os \}\} with Python $\{\{ matrix.python-version \}\}
    needs: [pre_commit]
    runs-on: $\{\{ matrix.os \}\}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        # Run on the full set on schedule, workflow_dispatch and push&tags events, otherwise on a subset.
        python-version: $\{\{ ( github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || ( github.event_name == 'push' && github.ref_type == 'tag' ) ) && fromJSON('["3.8", "3.9", "3.10", "3.11"]') || fromJSON('["3.8", "3.9", "3.11"]') \}\}
    timeout-minutes: 90
    defaults:
      run:
        shell: bash -l \{0\}
    env:
      DESC: "Python $\{\{ matrix.python-version \}\} tests"
      PYTHON_VERSION: $\{\{ matrix.python-version \}\}
      SETUPTOOLS_ENABLE_FEATURES: "legacy-editable"
      DISPLAY: ":99.0"
      PYTHONIOENCODING: "utf-8"
      GITHUB_TOKEN: $\{\{ secrets.GITHUB_TOKEN \}\}
      # Without this env var `doit env_create ...` uses by default
      # the `pyviz` channel, except that we don't want to configure
      # it as one of the sources.
      PYCTDEV_SELF_CHANNEL: "pyviz/label/dev"
    steps:
      - uses: pyviz-dev/holoviz_tasks/install@v0.1a12
        with:
          name: unit_test_suite
          python-version: $\{\{ matrix.python-version \}\}
          channels: pyviz/label/dev,bokeh/label/dev,conda-forge,nodefaults
          # Remove when Python 3.11 is well supported on latest conda/conda-forge.
          conda-update: $\{\{ matrix.python-version == '3.11' && 'false' || 'true' \}\}
          nodejs: true
          # Remove when all examples tools can be installed on 3.10
          envs: $\{\{ !contains(matrix.python-version, '3.1') && '-o examples -o recommended -o tests -o build' || '-o recommended -o tests -o build' \}\}
          cache: true
          opengl: true
          conda-mamba: mamba
        id: install
      - name: doit env_capture
        run: |
          conda activate test-environment
          doit env_capture
      - name: doit test_unit
        run: |
          conda activate test-environment
          doit test_unit
      - name: test examples
        # Remove when all examples tools can be installed on 3.10
        if: (!(contains(matrix.python-version, '3.1')))
        run: |
          conda activate test-environment
          doit test_examples
  ui_test_suite:
    name: UI tests on $\{\{ matrix.os \}\} with Python 3.9
    needs: [pre_commit]
    runs-on: $\{\{ matrix.os \}\}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
    timeout-minutes: 60
    defaults:
      run:
        shell: bash -el \{0\}
    env:
      DESC: "Python $\{\{ matrix.python-version \}\} tests"
      PYTHONIOENCODING: "utf-8"
      PANEL_LOG_LEVEL: info
      GITHUB_TOKEN: $\{\{ secrets.GITHUB_TOKEN \}\}
      SETUPTOOLS_ENABLE_FEATURES: "legacy-editable"
      # Without this env var `doit env_create ...` uses by default
      # the `pyviz` channel, except that we don't want to configure
      # it as one of the sources.
      PYCTDEV_SELF_CHANNEL: "pyviz/label/dev"
    steps:
      - uses: pyviz-dev/holoviz_tasks/install@v0.1a12
        with:
          name: ui_test_suite
          python-version: 3.9
          channels: pyviz/label/dev,bokeh/label/dev,conda-forge,nodefaults
          envs: "-o recommended -o tests -o build"
          cache: true
          nodejs: true
          playwright: true
          conda-mamba: mamba
        id: install
      - name: doit env_capture
        run: |
          conda activate test-environment
          doit env_capture
      - name: doit test_ui
        run: |
          conda activate test-environment
          doit test_ui
